{"version":3,"sources":["randomApi.js","UserDetails.js","RandomUsers.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","fetchTwentyUsers","get","headers","UserDetails","props","count","className","users","map","user","key","dob","date","name","first","last","gender","location","country","dateFormat","checkBirthday","RandomUsers","state","getUsers","then","res","setState","data","results","getDate","today","Date","dd","String","padStart","mm","getMonth","length","substring","birthday","slice","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAAMA,EAAQC,EAAQ,IAASC,QAElBC,EAAmB,WAE5B,OAAOH,EAAMI,IAAI,wCAAyC,CACtDC,QAAS,CACL,eAAgB,uBCHfC,G,YAAc,SAACC,GACxB,IAAIC,EAAQ,EACZ,OACI,2BAAOC,UAAU,qBACb,2BAAOA,UAAU,sBACb,4BACI,6BACA,yCACA,sCACA,iDACA,mCACA,6DAGJ,+BAEQF,EAAMG,MAAMC,KAAI,SAAAC,GAAI,OAChB,wBAAIC,IAAKD,EAAKE,IAAIC,MACd,wBAAIN,UAAU,sBAAsBD,IAApC,KACA,4BAAKI,EAAKI,KAAKC,MAAf,IAAuBL,EAAKI,KAAKE,MACjC,4BAAKN,EAAKO,OAAV,KACA,4BAAKP,EAAKQ,SAASC,QAAnB,KACA,4BAAKd,EAAMe,WAAWV,EAAKE,IAAIC,MAA/B,KACA,4BAAKR,EAAMgB,cAAchB,EAAMQ,KAAMH,EAAKE,IAAIC,MAA9C,aC8CjBS,E,2MAjEXC,MAAQ,CACJf,MAAO,GACPK,KAAM,GACNP,MAAO,G,EASXkB,SAAW,WACP,OAAOvB,IACFwB,MAAK,SAAAC,GAEF,EAAKC,SAAS,CAAEnB,MAAOkB,EAAIE,KAAKC,c,EAI5CC,QAAU,WACN,IAAIC,EAAQ,IAAIC,KACVC,EAAKC,OAAOH,EAAMD,WAAWK,SAAS,EAAG,KACzCC,EAAKF,OAAOH,EAAMM,WAAa,GAAGF,SAAS,EAAG,KACpDJ,EAAQK,EAAKH,EACb,EAAKN,SAAS,CACVd,KAAMkB,K,EAIdO,OAAS,G,EACTlB,WAAa,SAACP,GAAD,OAAUA,EAAK0B,UAAU,EAAG,EAAKD,S,EAE9CjB,cAAgB,SAACR,EAAMD,GACnB,IAEM4B,EAFK5B,EAAI6B,MAAM,EAAG,GACb7B,EAAI6B,MAAM,EAAG,IAUxB,OAPI5B,IAAS2B,EACA,2CACF3B,EAAO2B,EACL,4DAEA,0BAAMjC,UAAU,6BAAhB,qB,mFAnCbmC,KAAKlB,WACLkB,KAAKZ,Y,+BAyCL,OACI,yBAAKvB,UAAU,uBACX,kBAAC,EAAD,CACIM,KAAM6B,KAAKnB,MAAMV,KACjBL,MAAOkC,KAAKnB,MAAMf,MAClBY,WAAYsB,KAAKtB,WACjBC,cAAeqB,KAAKrB,qB,GAzDdsB,a,MCUXC,MAXf,WACE,OACE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,cAAlB,yBAGE,kBAAC,EAAD,QCCYsC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.18c8d8f6.chunk.js","sourcesContent":["const axios = require('axios').default;\n\nexport const fetchTwentyUsers = () => {\n    // Make a request for a user with a given ID\n    return axios.get('https://randomuser.me/api/?results=20', {\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    })\n}\n","import React from 'react';\nimport './UserDetails.css';\n\nexport const UserDetails = (props) => {\n    let count = 1;\n    return (\n        <table className=\"UserDetails-table\">\n            <thead className=\"UserDetails-header\">\n                <tr>\n                    <th></th>\n                    <th>Full Name</th>\n                    <th>Gender</th>\n                    <th>Country of Origin</th>\n                    <th>DOB</th>\n                    <th>This Year's Birthday Status</th>\n                </tr>\n            </thead>\n                <tbody>\n                    {\n                        props.users.map(user =>\n                            <tr key={user.dob.date}>\n                                <td className=\"UserDetails-number\">{count++}.</td>\n                                <td>{user.name.first} {user.name.last}</td>\n                                <td>{user.gender} </td>\n                                <td>{user.location.country} </td>\n                                <td>{props.dateFormat(user.dob.date)} </td>\n                                <td>{props.checkBirthday(props.date, user.dob.date)} </td>\n                            </tr>\n                        )\n                    }\n                </tbody>\n        </table>\n\n            )\n        }\n        \n","import React, { Component } from 'react';\nimport { fetchTwentyUsers } from './randomApi'\nimport './RandomUsers.css';\nimport { UserDetails } from './UserDetails'\n\n\nclass RandomUsers extends Component {\n    state = {\n        users: [],\n        date: {},\n        count: 0,\n    }\n\n\n    componentDidMount() {\n        this.getUsers()\n        this.getDate()\n    }\n\n    getUsers = () => {\n        return fetchTwentyUsers()\n            .then(res => {\n                // reset the state of user to reflect accurate data\n                this.setState({ users: res.data.results })\n            })\n    }\n\n    getDate = () => {\n        let today = new Date();\n        const dd = String(today.getDate()).padStart(2, '0');\n        const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        today = mm + dd;\n        this.setState({\n            date: today,\n        })\n    }\n\n    length = 10;\n    dateFormat = (date) => date.substring(0, this.length);\n\n    checkBirthday = (date, dob) => {\n        const mm = dob.slice(5, 7)\n        const dd = dob.slice(8, 10)\n        const birthday = mm + dd\n        let result = ''\n        if (date === birthday) {\n            result = <span>is today!</span>\n        } else if (date < birthday) {\n            result = <span>has yet to occur this year</span>\n        } else {\n            result = <span className=\"RandomUsers-past-birthday\">already happened</span>\n        }\n        return result;\n    }\n\n    render() {\n\n        return (\n            <div className=\"RandomUsers-Wrapper\">\n                <UserDetails \n                    date={this.state.date}\n                    users={this.state.users}\n                    dateFormat={this.dateFormat} \n                    checkBirthday={this.checkBirthday}\n                />\n            </div>\n        )\n    }\n}\n\n\n\nexport default RandomUsers;","import React from 'react';\n// import logo from './logo.png';\nimport RandomUsers from './RandomUsers.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Random User Generator\n      </header>\n        <RandomUsers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}